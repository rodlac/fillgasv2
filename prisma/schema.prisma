generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  auditLogs AuditLog[]
  apiKeys   ApiKey[]
  payments  Payment[] @relation("VerifiedBy")

  @@map("v2_users")
}

model Client {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  phone     String    @unique
  address   String
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("v2_clients")
}

model Service {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("v2_services")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Booking {
  id          String        @id @default(cuid())
  clientId    String
  client      Client        @relation(fields: [clientId], references: [id])
  serviceId   String
  service     Service       @relation(fields: [serviceId], references: [id])
  bookingDate DateTime
  status      BookingStatus @default(PENDING)
  notes       String?
  couponId    String?
  coupon      Coupon?       @relation(fields: [couponId], references: [id])
  payments    Payment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("v2_bookings")
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PENDING_VERIFICATION
}

model Payment {
  id            String        @id @default(cuid())
  bookingId     String
  booking       Booking       @relation(fields: [bookingId], references: [id])
  amount        Float
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  proofUrl      String?
  verifier       User?         @relation("VerifiedBy", fields: [verifierId], references: [id])
  verifierId    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  proofs PaymentProof[]

  @@map("v2_payments")
}

model PaymentProof {
  id        String @id @default(cuid())
  paymentId String
  filename  String
  filePath  String
  mimeType  String
  fileSize  Int
  createdAt DateTime @default(now())

  // Relations
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("v2_paymentProofs")
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model Coupon {
  id           String       @id @default(cuid())
  code         String       @unique
  discountType DiscountType
  value        Float
  expirationDate DateTime?
  isActive     Boolean      @default(true)
  bookings     Booking[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("v2_coupons")
}

model ApiKey {
  id          String    @id @default(cuid())
  userId      String
  name        String
  keyHash     String
  keyPrefix   String
  permissions Json
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("v2_apiKeys")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String
  entityId   String?
  changes    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("v2_auditLogs")
}
